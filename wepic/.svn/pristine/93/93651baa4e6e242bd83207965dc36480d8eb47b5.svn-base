package com.wetuo.wepic.deal.dao ;
 
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
 
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.ResultTransformer;
import org.hibernate.transform.Transformers;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.fop.layout.Page;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.wetuo.wepic.deal.beans.Bid;
import com.wetuo.wepic.deal.beans.BidResponseInvited;
import com.wetuo.wepic.deal.beans.BuyCartDeal;
import com.wetuo.wepic.publish.beans.Publish;
import com.wetuo.wepic.common.hibernate.HibernateSessionFactory;
import com.wetuo.wepic.common.hibernate.XgHibernateCommonDao;
import com.wetuo.wepic.common.hibernate.Pager;
import com.wetuo.wepic.common.util.UUIDGenerator;
import com.wetuo.wepic.core.beans.User;
import com.wetuo.wepic.core.service.UserService;

import org.springframework.orm.hibernate3.HibernateCallback;

import java.io.Serializable;
import java.sql.SQLException;
 
public class BidDaoImpl extends XgHibernateCommonDao implements BidDao {
	private static Log log = LogFactory.getLog(BidDaoImpl.class);
	private static int rowCount = 0;
	private UserService userService;
	
	
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	//////////////common crud//////////////////////////////////////////////
	public List<Bid> findAll(){ 
		return (List<Bid>)getHibernateTemplate().find("from Bid");
	}
	
	public List<Bid> findPart(String strFields, String[] arrStrValues){ 
		
		
		
		
		return (List<Bid>)getHibernateTemplate().find("from Bid where "+strFields, arrStrValues);
	}
	
public Pager list(final int pageSize,final int pageNo)  {	
	Pager pager = null;	
	//??????HibernateCallback????4??��??
	List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
		public Object doInHibernate(Session session) throws HibernateException, SQLException {
			//???Hibernate??????
			//List result = session.createQuery(hql).setParameter(0, value).setFirstResult(offset).setMaxResults(pageSize).list();
			Criteria criteria = session.createCriteria(Bid.class);
			BidDaoImpl.rowCount = ((Integer) criteria.setProjection( Projections.rowCount()).uniqueResult()).intValue();
			criteria.setProjection(null);
			criteria.setFirstResult(pageSize * (pageNo - 1));
			criteria.setMaxResults(pageSize);
			List<?> result = criteria.list();
			return result;
		}
	});
	pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
	return pager;
	
	}//end list()
public Pager list(final String username,final int pageSize,final int pageNo)  {	
	Pager pager = null;	
	//??????HibernateCallback????4??��??
	List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
		public Object doInHibernate(Session session) throws HibernateException, SQLException {
			//???Hibernate??????
			//List result = session.createQuery(hql).setParameter(0, value).setFirstResult(offset).setMaxResults(pageSize).list();
			Criteria criteria = session.createCriteria(Bid.class);
			User user=userService.select(username);
			criteria.add(Restrictions.eq("user", user));
		//	criteria.add(Restrictions.not(Restrictions.eq("status", 2)));
			BidDaoImpl.rowCount = ((Integer) criteria.setProjection( Projections.rowCount()).uniqueResult()).intValue();
			criteria.setProjection(null);
			criteria.setFirstResult(pageSize * (pageNo - 1));
			criteria.setMaxResults(pageSize);
			List<?> result = criteria.list();
			return result;
		}
	});
	pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
	return pager;
	
	}//end list()


public Pager checkedBid(final int pageSize,final int pageNo,final String param)  {	
	Pager pager = null;	
	//??????HibernateCallback????4??��??
	List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
		public Object doInHibernate(Session session) throws HibernateException, SQLException {
			//???Hibernate??????
			//List result = session.createQuery(hql).setParameter(0, value).setFirstResult(offset).setMaxResults(pageSize).list();
			Criteria criteria = session.createCriteria(Bid.class);
			//User user=userService.select(username);
			//criteria.add(Restrictions.eq("user", user));
			if("not".equals(param)){
				criteria.add(Restrictions.eq("status", 9));
			}
			else{
				criteria.add(Restrictions.eq("status", 8));
				
			}
			BidDaoImpl.rowCount = ((Integer) criteria.setProjection( Projections.rowCount()).uniqueResult()).intValue();
			criteria.setProjection(null);
			criteria.setFirstResult(pageSize * (pageNo - 1));
			criteria.setMaxResults(pageSize);
			List<?> result = criteria.list();
			return result;
		}
	});
	pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
	return pager;
	
	}//end list()




public Pager cancelbidList(final String username,final int pageSize,final int pageNo)  {	
	Pager pager = null;	
	//??????HibernateCallback????4??��??
	List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
		public Object doInHibernate(Session session) throws HibernateException, SQLException {
			//???Hibernate??????
			//List result = session.createQuery(hql).setParameter(0, value).setFirstResult(offset).setMaxResults(pageSize).list();
			Criteria criteria = session.createCriteria(Bid.class);
			User user=userService.select(username);
			criteria.add(Restrictions.eq("user", user));
		
			BidDaoImpl.rowCount = ((Integer) criteria.setProjection( Projections.rowCount()).uniqueResult()).intValue();
			criteria.setProjection(null);
			criteria.setFirstResult(pageSize * (pageNo - 1));
			criteria.setMaxResults(pageSize);
			List<?> result = criteria.list();
			return result;
		}
	});
	pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
	return pager;
	
	}//end list()

public Pager findPublicBidList(final String username,final int pageSize,final int pageNo)  {	
	Pager pager = null;	
	//??????HibernateCallback????4??��??
	List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
		public Object doInHibernate(Session session) throws HibernateException, SQLException {
			//???Hibernate??????
			//List result = session.createQuery(hql).setParameter(0, value).setFirstResult(offset).setMaxResults(pageSize).list();
			Criteria criteria = session.createCriteria(Bid.class);
			User user=userService.select(username);
	        criteria.add(Restrictions.not(Restrictions.eq("user",user)));
	        criteria.add(Restrictions.eq("publicOrPrivate", 1));
			BidDaoImpl.rowCount = ((Integer) criteria.setProjection( Projections.rowCount()).uniqueResult()).intValue();
			criteria.setProjection(null);
			criteria.setFirstResult(pageSize * (pageNo - 1));
			criteria.setMaxResults(pageSize);
			List<?> result = criteria.list();
			return result;
		}
	});
	pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
	return pager;
	
	}//end list()
   





	public Pager list(final Map<String,Object> mapSqlParam,final int pageSize,final int pageNo)  {
		Pager pager = null;
		//??????HibernateCallback????4??��??
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
		//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				Set setKeyOfMap = new HashSet();
				setKeyOfMap = mapSqlParam.keySet();
				//
				Iterator itKey = setKeyOfMap.iterator();
				String strWhereParam = "";
				int intIWhere = 0;
				while(itKey.hasNext()){
					String strKeyI = (String)itKey.next();
					if(intIWhere == 0){
					strWhereParam = strWhereParam + " a." + strKeyI + " = ? " ;
					}else strWhereParam = strWhereParam + " and a." + strKeyI + " = ? " ; 
					intIWhere++;
				}//end while
				//???Hibernate??????
				int intSerial = 0;
				Query q = session.createQuery("select count(*) from  Bid  a where " + strWhereParam );
				Iterator itKey2 = setKeyOfMap.iterator();
				while(itKey2.hasNext()){
					String strKeyI2 = (String)itKey2.next();
					q.setParameter(intSerial,mapSqlParam.get(strKeyI2)); 
					intSerial++;
				}
				Object count = q.uniqueResult();
				BidDaoImpl.rowCount = Integer.parseInt(count.toString());
				//
				intSerial = 0;
				q = session.createQuery("select a from Bid a where " + strWhereParam );
				Iterator itKey3 = setKeyOfMap.iterator();
				while(itKey3.hasNext()){
					String strKeyI3 = (String)itKey3.next();
					q.setParameter(intSerial,mapSqlParam.get(strKeyI3)); 
					intSerial++;
				}
				q.setMaxResults(pageSize);
				q.setFirstResult((pageNo - 1) * pageSize);
				List<?> resultList = q.list();
				return resultList;
				}
		});
		pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
		return pager;
		
	}//end list()
		
	/////insert///
	public String insert(Bid record) {
		/*
		Session session = null;
		Transaction tx = null;
		Integer id = null;
		try {
			session = HibernateSessionFactory.currentSession();
			tx = session.beginTransaction();
			session.save(record);
			id = record.getId();
			tx.commit();
			
		} catch (HibernateException e) {
			throw e;
			//return record.getId();
		} finally {
			if (tx != null) {
				tx.rollback();
			}
			HibernateSessionFactory.closeSession();
		}
			
		return id;
		
		
		
		<table width="95%" height="130px" style="border-bottom:1px dashed #CFCFCF"><tbody><tr><td align="left">发布人</td><td>&nbsp;&nbsp;p1</td> <td align="right">征集时间</td><td>&nbsp;&nbsp;2013-05-17---2013/05/30</td><td align="right">工作执行时间</td><td>&nbsp;&nbsp;2013/05/31---2013/05/26</td></tr><tr><td align="left">工作地点</td><td>&nbsp;&nbsp;上海市</td><td align="right">约拍类型</td><td>&nbsp;&nbsp;找模特/摄影师</td><td align="right">是否公开</td><td>&nbsp;&nbsp;公开招标</td></tr><tr><td align="left">约拍薪酬</td><td>&nbsp;&nbsp;1000</td><td align="right">招聘人数</td><td>&nbsp;&nbsp;2</td></tr><tr><td align="left">征集要求</td><td colspan="4">&nbsp;&nbsp;上海会展摄影上海会展摄影上海会展摄影上海会展摄影上海会展摄影</td></tr></tbody></table>
		*/
		String integerRet = null; 
		return (String)getHibernateTemplate().save(record);
	}//end insert()
			
	/////get max(id)///
	public int getMaxShowIndex(final String strEntityName,final String strFieldName ) {  
		List list = null; 
		int maxShowIndex = 1;   
		HibernateCallback callback = new HibernateCallback() {
			public Object doInHibernate(Session session)  throws HibernateException { 
				Query q = session.createQuery("select max("+strFieldName+") from "+strEntityName+""); 
				return q.list(); 
			} 
		};
		list = (List) getHibernateTemplate().execute(callback); 
		if (list != null){ 
			if (list.size() == 1) {
				if (list.get(0)!=null) ///���û�����,����᷵��һ��null 
					maxShowIndex = ((Integer) list.get(0)).intValue(); 
			}//end if 
		}//end if 
		return maxShowIndex; 
	}//end  getMaxShowIndex() 
	
	/////delete///
	public boolean delete(Bid record)  {
		/*
		Session session = null;
		Transaction tx = null;
		boolean b = true;
		try {
			session = HibernateSessionFactory.currentSession();
			tx = session.beginTransaction();
			session.delete(record);
			tx.commit();
		} catch (HibernateException e) {
			b = false;
			throw e;
		} finally {
			if (tx != null) {
				tx.rollback();
			}
			HibernateSessionFactory.closeSession();
		}
			
		return b;
		*/
		getHibernateTemplate().delete(record);
		return true;
	}//end delete()
			
	public boolean delete(String id)  {
		/*
		Bid record = select(id);
		Session session = null;
		Transaction tx = null;
		boolean b = true;
		try {
			session = HibernateSessionFactory.currentSession();
			tx = session.beginTransaction();
			session.delete(record);
			tx.commit();
		} catch (HibernateException e) {
			b = false;
			throw e;
		} finally {
			if (tx != null) {
				tx.rollback();
			}
			HibernateSessionFactory.closeSession();
		}
			
		return b;
		*/
		Object obj = getHibernateTemplate().load(Bid.class,new String(id));
		getHibernateTemplate().delete(obj);
		return true;
	}//end delete()
			
	/////update///
	public boolean update(Bid record)  {
		/*
		Session session = null;
		Transaction tx = null;
		boolean b = true;
		try {
			session = HibernateSessionFactory.currentSession();
			tx = session.beginTransaction();
			session.update(record);
			tx.commit();
		} catch (HibernateException e) {
			b = false;
			throw e;
		} finally {
			if (tx != null) {
				tx.rollback();
			}
			HibernateSessionFactory.closeSession();
		}
			
		return b;
		*/
		getHibernateTemplate().update(record);
		return true;
		
	}//end update()
			
	/////select///
	public Bid select(String id)  {
		/*
		Session session = null;
		Bid record = null;
		try {
			session = HibernateSessionFactory.currentSession();
			Query query = session.createQuery("from Bid where id=?");
			query.setInteger(0, id);
			record = (Bid) query.uniqueResult();
			query = null;
			
		} catch (HibernateException e) {
			throw e;
		} finally {
			HibernateSessionFactory.closeSession();
		}
		
		return record;
		*/
//		DetachedCriteria criteria=DetachedCriteria.forClass(BuyCartDeal.class);
//		criteria.add(Expression.eq("user",user));
//		criteria.addOrder(Order.desc("deliveryTime"));
//		List<BuyCartDeal> list=this.getHibernateTemplate().findByCriteria(criteria);
		Bid b=null;
		
//		try {
//			DetachedCriteria criteria=DetachedCriteria.forClass(Bid.class);
//			criteria.add(Expression.eq("id",id));
//			//b=(Bid)getHibernateTemplate().find("from Bid where id="+id+"'").get(0);
//			b=(Bid)this.getHibernateTemplate().findByCriteria(criteria).get(0);
//		
////		b=(Bid) getHibernateTemplate().get(Bid.class, new String(id));
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return (Bid) getHibernateTemplate().get(Bid.class, new String(id));
		return getHibernateTemplate().get(Bid.class,  new String(id).trim());
		
		
	}//end select()
	
	
	@SuppressWarnings("unchecked")
	public List<?> findByendPriod(final String endTime){
		
		
		
		
		return super.getHibernateTemplate().executeFind(new HibernateCallback() {

			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
			//	String sql="SELECT * from bid WHERE period='2013-04-28' and id IN(SELECT bidid FROM bidresponseinvited b WHERE b.isConfirmed=0";
			
				return session.createQuery("from Bid WHERE workEndTime='"+endTime+"' AND (status=0 or status=1 or status=2)")
				//.addEntity(Bid.class)
				//.setResultTransformer(Transformers.aliasToBean(Bid.class))
				.list();
			}
		});
	}
	
	
	@SuppressWarnings("unchecked")
	public List<?> findByendPriod(final String endTime,String bywithTime){
		
		
		
		
		return super.getHibernateTemplate().executeFind(new HibernateCallback() {

			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
			//	String sql="SELECT * from bid WHERE period='2013-04-28' and id IN(SELECT bidid FROM bidresponseinvited b WHERE b.isConfirmed=0";
			
				return session.createQuery("from Bid WHERE period='"+endTime+"' AND status=0")
				//.addEntity(Bid.class)
				//.setResultTransformer(Transformers.aliasToBean(Bid.class))
				.list();
			}
		});
	}
	
	
	/////main///
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}
	/**
	 * public List<Publish> selectByFrontPage(final String type,final int pageNo,final int pageSize ) {
		try{
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback
			public Object doInHibernate(Session session) throws HibernateException, SQLException {


				String queryString = " from Publish as publish where "; 
				//publish.commend=1 and publish.status>=2   order by  publish.id desc";
				if("meirituijian".equals(type)){
					queryString=queryString + " publish.commend=4";
					
					
				}
				if("sheyingtuypian".equals(type)){
					queryString=queryString + " publish.commend=5";
				}
				queryString=queryString+" and publish.status>=2   order by  publish.id desc";
				return session.createQuery(queryString)
				.setMaxResults(pageSize)
				.setFirstResult((pageNo - 1) * pageSize).list();
			}
		});
		
		return 	list;//
		}catch (Exception e) {
		e.printStackTrace();
		return 	null;//
		}
		//this.getHibernateTemplate().find(queryString);
	}
	 */
	public List<Bid> selectByFrontPage2(final String typeId,final int pageNo,final int pageSize) {
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String hql="from Bid bid where type="+typeId+" order by bid.startTime,bid.totalMoney desc";
				Query criteria = session.createQuery(hql);
				criteria.setFirstResult(pageSize * (pageNo - 1));
				criteria.setMaxResults(pageSize);
				List<Bid> result = criteria.list();
				return result;
			}
		});
		return list;
	}
	@SuppressWarnings("unchecked")
	public List<Bid> selectByFrontPage(final String typeId,final int pageNo,final int pageSize) {
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String sql=" select bid0_.id as id27_,bid0_.user as user2_27_,bid0_.name as name27_,bid0_.imgSum as imgSum27_, bid0_.totalMoney as totalMoney27_,bid0_.recruitNum as recruitNum27_, bid0_.startTime as startTime27_,bid0_.workStartTime as workStar8_27_, bid0_.workEndTime as workEndT9_27_,bid0_.workPlace as workPlace10_27_,bid0_.status as status27_,bid0_.tag as tag27_"+ 
                " ,bid0_.period as period27_ from Bid bid0_ where type="+typeId+" and bid0_.status=0  order by   bid0_.startTime DESC,bid0_.totalMoney  DESC ";
				if(typeId.equals("4")){
					sql="  from Bid bid0_  where bid0_.status=0   order by   bid0_.startTime DESC,bid0_.totalMoney  DESC ";
				}
//				String hql="from Bid bid where type="+typeId+" order by bid.startTime,bid.totalMoney desc";
				Query criteria = session.createQuery(sql);
				List<Bid> result =null;
				
				try {
					System.out.println(session);
					criteria.setFirstResult(pageSize * (pageNo - 1));
					criteria.setMaxResults(pageSize);
					result = criteria.list();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				
				//List<Bid> result = criteria.list();
				return result;
			}
		});
	//	String sql=" select bid0_.id as id27_,bid0_.user as user2_27_,bid0_.name as name27_,bid0_.imgSum as imgSum27_, bid0_.totalMoney as totalMoney27_,bid0_.recruitNum as recruitNum27_, bid0_.startTime as startTime27_,bid0_.workStartTime as workStar8_27_, bid0_.workEndTime as workEndT9_27_,bid0_.workPlace as workPlace10_27_,bid0_.status as status27_,bid0_.tag as tag27_"+ 
      //            " ,bid0_.period as period27_ from Bid bid0_ where bidtype="+typeId+"  order by  bid0_.totalMoney,  bid0_.startTime DESC ";
		return list;//this.getHibernateTemplate().find(sql);
	}
	
	
	
	public Pager selectByteyuePage(final String typeId,final int pageNo,final int pageSize) {
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String sql=" from Bid where type="+typeId+"  and status=0 order by  totalMoney,  startTime DESC ";
				if(typeId.equals("4")){
					sql=" select bid0_.id as id27_,bid0_.user as user2_27_,bid0_.name as name27_,bid0_.imgSum as imgSum27_, bid0_.totalMoney as totalMoney27_,bid0_.recruitNum as recruitNum27_, bid0_.startTime as startTime27_,bid0_.workStartTime as workStar8_27_, bid0_.workEndTime as workEndT9_27_,bid0_.workPlace as workPlace10_27_,bid0_.status as status27_,bid0_.tag as tag27_"+ 
	                " ,bid0_.period as period27_ from Bid bid0_  where bid0_.status=0  order by  bid0_.totalMoney,  bid0_.startTime DESC ";
				}
			
				Query criteria = session.createQuery(sql);
				rowCount=criteria.list().size();
				criteria.setFirstResult(pageSize * (pageNo - 1));
				criteria.setMaxResults(pageSize);
				//criteria.setResultTransformer(Transformers.aliasToBean(Bid.class));
				List<?> result = criteria.list();
				return result;
			}
		});
		Pager pager=new Pager(pageSize, pageNo, rowCount, list);
	//	String sql=" select bid0_.id as id27_,bid0_.user as user2_27_,bid0_.name as name27_,bid0_.imgSum as imgSum27_, bid0_.totalMoney as totalMoney27_,bid0_.recruitNum as recruitNum27_, bid0_.startTime as startTime27_,bid0_.workStartTime as workStar8_27_, bid0_.workEndTime as workEndT9_27_,bid0_.workPlace as workPlace10_27_,bid0_.status as status27_,bid0_.tag as tag27_"+ 
      //            " ,bid0_.period as period27_ from Bid bid0_ where bidtype="+typeId+"  order by  bid0_.totalMoney,  bid0_.startTime DESC ";
		return pager;//this.getHibernateTemplate().find(sql);
	}
    //用户发标
	public List<?> selectBidMsg(final int id) {
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String sql=" SELECT u.username, bid.name FROM  Bid bid  LEFT JOIN  user u ON bid.user_=u.id WHERE u.id="+id+" ORDER BY bid.startTime DESC ";
				
				Query criteria = session.createSQLQuery(sql);
				rowCount=criteria.list().size();
				criteria.setFirstResult(0);
				criteria.setMaxResults(6);
				//criteria.setResultTransformer(Transformers.aliasToBean(Bid.class));
				List<?> result = criteria.list();
				return result;
			}
		});
		
		return list;

	}
	//用户应标
	public List<?> selectResonBid(final int id) {
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String sql=" SELECT u.username,bid.name FROM  BidResponseInvited  b LEFT JOIN  Bid bid ON bid.id=b.bidid LEFT JOIN  user u ON b.user_=u.id WHERE u.id="+id+" AND b.isResponse=1 ORDER BY b.reponseTime DESC";
				
				Query criteria = session.createSQLQuery(sql);
				rowCount=criteria.list().size();
				criteria.setFirstResult(0);
				criteria.setMaxResults(6);
				//criteria.setResultTransformer(Transformers.aliasToBean(Bid.class));
				List<?> result = criteria.list();
				return result;
			}
		});
		
		return list;

	}
	public static boolean isNum(String str){
		return str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$");
	}
	public Pager selectFindSerarch(final String position, final String type,
			final String dateTime, final String price, final String satues,final int pageSize,final int pageNo) {
		Pager pager = null;	
		//??????HibernateCallback????4??��??
		List list = getHibernateTemplate().executeFind(new HibernateCallback()	{
			//???HibernateCallback?????????????
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				String sqlString=" from Bid  ";
					String[] prices;
					String datetimes="";
					boolean falg=false;
					if(position!=""&&position.length()>0){
						sqlString+=" where workPlace like '%"+position+"%'";
						falg=true;
					}
					if(type!=""&&type.length()>0){
						String hyphen="";
						if(falg){
							hyphen=" and ";
						}else{
							hyphen="where";
						}
						
						falg=true;
						if(isNum(type)){
							sqlString+=hyphen+" type='"+type+"'";
						}else{
						sqlString+=hyphen+" tag='"+type+"'";
						}
						
					}
					if(dateTime!=""&&dateTime.length()>0){
						String hyphen="";
						if(falg){
							hyphen=" and ";
							
						}else{
							hyphen="where";
							
						}
						falg=true;
						
						
						if("今天".equals(dateTime.trim())){
							datetimes=new SimpleDateFormat("yyyy/MM/dd").format(new Date());
							sqlString+=hyphen+" startTime='"+datetimes+"'";
						}
						if("最近三天".equals(dateTime.trim())){
							Calendar   rightNow   =   Calendar.getInstance();  
					        rightNow.add(Calendar.DAY_OF_MONTH,-3); 
					        datetimes=new SimpleDateFormat("yyyy-MM-dd").format(rightNow.getTime());
					        sqlString+=hyphen+" startTime>'"+datetimes+"'";
					        
						}
						if("最近一星期".equals(dateTime.trim())){
							//datetimes=new SimpleDateFormat("yyyy-MM-dd").format(new Date());
							Calendar   rightNow   =   Calendar.getInstance();  
					        rightNow.add(Calendar.DAY_OF_MONTH,-7); 
					        datetimes=new SimpleDateFormat("yyyy-MM-dd").format(rightNow.getTime());
					        sqlString+=hyphen+" startTime > '"+datetimes+"'";
						}
					}
					//language_tm20084.contains("-");
					if(price!=""&&price.length()>0){
						String hyphen="";
						if(falg){
							hyphen=" and ";
							
						}else{
							hyphen="where";
							
						}
						falg=true;
						if(price.contains("-")){
							prices=price.split("-");
							sqlString+=hyphen+" totalMoney BETWEEN "+prices[0]+" and  "+prices[1];
						}else{
							
							if(!price.equals("500")){
								 sqlString+=hyphen+" totalMoney > "+price;
								
							}
							else{
								
								 sqlString+=hyphen+" totalMoney < "+price;
							}
							
							
						}
					}
					if(satues!=null&&satues.length()>0){
						String hyphen="";
						if(falg){
							hyphen=" and ";
							
						}else{
							hyphen="where";
							
						}
						falg=true;
						 sqlString+=hyphen+" status = "+satues;
						
					}
					
					
					System.out.println(sqlString);
				
				
				
				
				Query query = session.createQuery(sqlString);
				BidDaoImpl.rowCount = query.list().size();
				query.setFirstResult(pageSize * (pageNo - 1));
				query.setMaxResults(pageSize);
				List<?> result = query.list();
				return result;
			}
		});
		pager = new Pager(pageSize, pageNo, BidDaoImpl.rowCount, list);
		return pager;
		}
	@SuppressWarnings("unchecked")
	public  List<Bid> bidList(DetachedCriteria  criteria){
		
		
		
		
		return this.getHibernateTemplate().findByCriteria(criteria);
	}
	
	@SuppressWarnings("unchecked")
	public Pager findbidList(DetachedCriteria  criteria,int nowPage,int pageSize){
		Pager pager=null;
		List list= this.getHibernateTemplate().findByCriteria(criteria, (nowPage-1)*pageSize, pageSize);//(criteria);
		pager=new Pager(pageSize, nowPage,10,list);
		
		
		return pager;
	}
	
	
	public int countRow(DetachedCriteria detachedCriteria){
		
		int totalCount=((Integer) this.getHibernateTemplate().findByCriteria(detachedCriteria.setProjection(Projections.rowCount())).get(0)).intValue();  
		
		return totalCount;
	}
	
	
	//SELECT u.username,bid.name FROM  bidresponseinvited  b LEFT JOIN  bid bid ON bid.id=b.bidid LEFT JOIN  user u ON b.user_=u.id WHERE u.id=7 AND B.isResponse=1 ORDER BY b.reponseTime DESC
	//SELECT u.username, bid.name FROM  bid bid  LEFT JOIN  user u ON bid.user_=u.id WHERE u.id=9 ORDER BY bid.startTime DESC
	
}//end class
